{"version":3,"sources":["Logic.js","Output.js","Input.js","App.js","serviceWorker.js","index.js"],"names":["binaryToDecimal","value","binary","length","sum","i","Math","pow","console","log","decimalToHex","decimal","result","remainder","floor","parseInt","convertToLetter","hexToDecimal","convertToNumber","decimalToBinary","number","Output","props","react_default","a","createElement","input","inputType","outputType","doMath","Input","_Component","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","inherits","createClass","key","_this2","className","type","id","autoComplete","onChange","e","setState","target","name","defaultChecked","Component","App","src_Input","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6a175ae4.chunk.js","sourcesContent":["export const binaryToDecimal = (value) => {\n    \n    let binary = value;\n    let length = binary.length - 1;\n    let sum = 0;\n    for (let i = length; i >= 0; i--) {\n      binary[i] == 1 ? (sum += Math.pow(2, length - i)) : console.log(\"skip\");\n    }\n    return sum;\n  }\n\nexport const decimalToHex = (value) => {\n\n    let decimal = value;\n    let result = \"\";\n    let remainder = 0;\n    console.log(decimal);\n    while (decimal > 16) {\n      remainder = decimal % 16;\n      if (remainder != 0) {\n        decimal = Math.floor(parseInt(decimal) / 16);\n        result = convertToLetter(remainder) + result;\n      }\n      Math.floor(parseInt(decimal) / 16);\n    }\n    if (parseInt(decimal) > 9) {\n      decimal = convertToLetter(decimal);\n    }\n    result = decimal + result;\n    return result;\n  }\n\n  export const hexToDecimal = (value) => {\n    let length = value.length - 1;\n    let sum = 0;\n    for (let i = length; i >= 0; i--) {\n      sum += convertToNumber(value[i]) * Math.pow(16, length - i);\n    }\n    return sum;\n  }\n\n  export const decimalToBinary = (value) => {\n      let decimal = value;\n      let binary = \"\";\n      while (decimal > 0) {\n        if (decimal % 2 == 0){\n            decimal/=2;\n            binary = \"0\" + binary;\n        } else {\n            decimal = Math.floor(decimal/2)\n            binary = \"1\" + binary;\n      }\n  }return binary;\n}\n\n  const convertToLetter = (number) => {\n    switch (number) {\n      case 10:\n        return \"A\";\n      case 11:\n        return \"B\";\n      case 12:\n        return \"C\";\n      case 13:\n        return \"D\";\n      case 14:\n        return \"E\";\n      case 15:\n        return \"F\";\n      default:\n        return number;\n    }\n  }\n\n  const convertToNumber = (number) => {\n    switch (number) {\n      case \"A\":\n        return 10;\n      case \"B\":\n        return 11;\n      case \"C\":\n        return 12;\n      case \"D\":\n        return 13;\n      case \"E\":\n        return 14;\n      case \"F\":\n        return 15;\n      default:\n        return number;\n    }\n}","/* eslint-disable default-case */\nimport React from 'react';\nimport { binaryToDecimal, decimalToHex, hexToDecimal, decimalToBinary} from './Logic.js';\n\nexport default function Output(props) {\n\n    const doMath = () => {\n\n    if (props.inputType === 'binary') {\n\n        switch (props.outputType) {\n          case \"binary\":\n            return props.input;\n          case \"decimal\":\n            return binaryToDecimal(props.input);\n          case \"hex\":\n            return decimalToHex(binaryToDecimal(props.input));\n          default:\n            break;\n        }\n      }\n  \n      else if (props.inputType === 'decimal') {\n        switch (props.outputType) {\n          case 'binary':\n          return decimalToBinary(props.input);\n          case \"decimal\":\n          return props.input;\n          case \"hex\":\n          return hexToDecimal(props.input);\n        }\n      }\n  \n      else if (props.inputType === \"hex\"){\n        switch (props.outputType) {\n          case \"binary\":\n            return decimalToBinary(hexToDecimal(props.input));\n          case \"decimal\":\n            return hexToDecimal(props.input);\n          case \"hex\":\n            return props.input;\n        }\n      }\n    }\n    \n    return (\n      <h2>{props.input== \" \" ? \"Enter a value\" : doMath()}</h2>\n        \n    )\n}","import React, { Component } from \"react\";\nimport Output from \"./Output\";\n\nexport class Input extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: \" \",\n      inputType: \"binary\",\n      outputType: \"binary\"\n    };\n  }\n\n  render() {\n    return (\n      <div className=\"text-center\">\n                <input\n            type=\"text\"\n            id=\"userInput\"\n            value={this.state.input}\n            autoComplete=\"off\"\n            onChange={e => {\n              this.setState({ input: e.target.value });\n            }}\n          />\n        <form id=\"userInput\">\n          Binary\n          <input\n            type=\"radio\"\n            id=\"binary\"\n            value=\"binary\"\n            name=\"inputType\"\n            defaultChecked\n            onChange={e => {\n              this.setState({\n                inputType: e.target.value,\n                input: \" \"\n              });\n            }}\n          />\n          Decimal\n          <input\n            type=\"radio\"\n            id=\"decimal\"\n            value=\"decimal\"\n            name=\"inputType\"\n            onChange={e => {\n              this.setState({ inputType: e.target.value, input: \" \" });\n            }}\n          />\n          Hex\n          <input\n            type=\"radio\"\n            id=\"hex\"\n            value=\"hex\"\n            name=\"inputType\"\n            onChange={e => {\n              this.setState({ inputType: e.target.value, input: \" \" });\n            }}\n          />\n        </form>\n\n        <form id=\"userInput\">\n          Binary\n          <input\n            type=\"radio\"\n            id=\"binary\"\n            value=\"binary\"\n            name=\"outputType\"\n            defaultChecked\n            onChange={e => this.setState({ outputType: e.target.value })}\n          />\n          Decimal\n          <input\n            type=\"radio\"\n            id=\"decimal\"\n            value=\"decimal\"\n            name=\"outputType\"\n            onChange={e => this.setState({ outputType: e.target.value })}\n          />\n          Hex\n          <input\n            type=\"radio\"\n            id=\"hex\"\n            value=\"hex\"\n            name=\"outputType\"\n            onChange={e => this.setState({ outputType: e.target.value })}\n          />\n        </form>\n        <Output\n          input={this.state.input}\n          inputType={this.state.inputType}\n          outputType={this.state.outputType}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Input;\n","import React, { Component } from 'react';\nimport './index.css';\nimport Input from './Input.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state= {\n      \n    }\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n      <h1 className=\"text-center\">Binary, Decimal, Hex Converter</h1>\n      <Input/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n\nserviceWorker.unregister();"],"sourceRoot":""}